{
  "Author": "This document was written by Garret Wassermann.",
  "CAM_AttackerAccessRequired": "0",
  "CAM_EaseOfExploitation": "0",
  "CAM_Exploitation": "0",
  "CAM_Impact": "0",
  "CAM_InternetInfrastructure": "0",
  "CAM_Population": "0",
  "CAM_ScoreCurrent": 0,
  "CAM_ScoreCurrentWidelyKnown": 0,
  "CAM_ScoreCurrentWidelyKnownExploited": 0,
  "CAM_WidelyKnown": "0",
  "CERTAdvisory": "",
  "CVEIDs": "",
  "CVSS_AccessComplexity": "--",
  "CVSS_AccessVector": "--",
  "CVSS_Authenication": "--",
  "CVSS_AvailabilityImpact": "--",
  "CVSS_BaseScore": 0,
  "CVSS_BaseVector": "AV:--/AC:--/Au:--/C:--/I:--/A:--",
  "CVSS_CollateralDamagePotential": "ND",
  "CVSS_ConfidentialityImpact": "--",
  "CVSS_EnvironmentalScore": 0,
  "CVSS_EnvironmentalVector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
  "CVSS_Exploitability": "ND",
  "CVSS_IntegrityImpact": "--",
  "CVSS_RemediationLevel": "ND",
  "CVSS_ReportConfidence": "ND",
  "CVSS_SecurityRequirementsAR": "ND",
  "CVSS_SecurityRequirementsCR": "ND",
  "CVSS_SecurityRequirementsIR": "ND",
  "CVSS_TargetDistribution": "ND",
  "CVSS_TemporalScore": 0,
  "CVSS_TemporalVector": "E:ND/RL:ND/RC:ND",
  "DateCreated": "2015-11-13T10:09:12-05:00",
  "DateFirstPublished": "",
  "DateLastUpdated": "2015-11-16T15:49:00-05:00",
  "DatePublic": "2015-01-28T00:00:00",
  "Description": "CWE-502: Deserialization of Untrusted Data In January 2015, at AppSec California 2015, researchers Gabriel Lawrence and Chris Frohoff described how many Java applications and libraries using Java Object Serialization may be vulnerable to insecure deserialization of data, which may result in arbitrary code execution. Any Java library or application that utilizes this functionality incorrectly may be impacted by this vulnerability. In November 2015, Stephen Breen of Foxglove Security announced the Apache Commons Collections Java library as being vulnerable, which appears to have kicked off searches for other code bases that may be affected by similar vulnerabilities. Apache Groovy bug tracker, Groovy prior to version 2.4.4 is also affected by a similar issue, and CVE-2015-3253 has been assigned to this flaw for Groovy only. Similarly, according to a Spring bug tracker entry, Spring prior to version 4.2.3 is also affected by a similar issue. ElasticSearch prior to 1.7.0 contained a similar vulnerability in its transport protocol methods, and assigned CVE-2015-5377 to the vulnerability. Furthermore, Lawrence and Frohoff's presentation describes how applications and libraries written in other languages, such as Python and Ruby, may also be vulnerable to the same type of issue. It is generally up to software designers to follow best practices for security when dealing with serialized data, no matter the programming language or library used.",
  "ID": "VU#708207",
  "IDNumber": "708207",
  "IPProtocol": "",
  "Impact": "A Java application or library utilizing the Apache Commons Collections library to deserialize data from an untrusted source may be coerced into executing arbitrary Java functions or bytecode.",
  "Keywords": [
    "apache",
    "java",
    "groovy",
    "deserialization",
    "serialization",
    "data"
  ],
  "Overview": "",
  "References": [
    "https://blogs.apache.org/foundation/entry/apache_commons_statement_to_widespread",
    "https://issues.apache.org/jira/browse/COLLECTIONS-580",
    "https://jira.spring.io/browse/SPR-13656",
    "http://seclists.org/bugtraq/2015/Jul/82",
    "https://www.elastic.co/community/security",
    "https://issues.apache.org/jira/browse/GROOVY-7504",
    "http://www.openwall.com/lists/oss-security/2015/11/11/3",
    "http://www.infoq.com/news/2015/11/commons-exploit",
    "https://tersesystems.com/2015/11/08/closing-the-open-door-of-java-object-serialization/",
    "http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/",
    "http://mail-archives.apache.org/mod_mbox/commons-dev/201511.mbox/%3c20151106222553.00002c57.ecki@zusammenkunft.net%3e",
    "http://frohoff.github.io/appseccali-marshalling-pickles/",
    "http://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles",
    "https://www.youtube.com/watch?v=VviY3O-euVQ",
    "https://commons.apache.org/proper/commons-collections/",
    "http://cwe.mitre.org/data/definitions/502.html",
    "http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8"
  ],
  "Resolution": "The CERT/CC is currently unaware of a full solution to this problem, but you may consider the following: Apply an update Other libraries and applications may be affected. Users and developers are encouraged to contact the software vendor with any questions. For example: If you use Apache Groovy, Groovy 2.4.4 has been released to address CVE-2015-3253. If you use the Spring library, Spring 4.2.3 will be released on Monday November 16th 2015 to address a similar issue. Developers may need to re-architect their applications In all cases, the update alone is generally insufficient to secure your application from insecure deserialization, and further architectural changes may be necessary to secure your application. Developers should in general be very suspicious of deserialized data from an untrusted source. For best practices, see the CERT Oracle Coding Standard for Java guidelines for Serialization, especially rules SER12-J and SER13-J.",
  "Revision": 4,
  "SystemsAffectedPreamble": "",
  "ThanksAndCredit": "",
  "Title": "Apache Groovy insecurely deserializes data",
  "US-CERTTechnicalAlert": "",
  "VRDA_D1_DirectReport": "1",
  "VRDA_D1_Impact": "3",
  "VRDA_D1_Population": "3",
  "VulnerabilityCount": 1,
  "Workarounds": ""
}