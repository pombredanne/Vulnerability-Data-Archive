{
  "Author": "This document was written by Jed M Pickel.",
  "CAM_AttackerAccessRequired": "20",
  "CAM_EaseOfExploitation": "4",
  "CAM_Exploitation": "0",
  "CAM_Impact": "20",
  "CAM_InternetInfrastructure": "17",
  "CAM_Population": "20",
  "CAM_ScoreCurrent": 13.2,
  "CAM_ScoreCurrentWidelyKnown": 22.2,
  "CAM_ScoreCurrentWidelyKnownExploited": 34.2,
  "CAM_WidelyKnown": "5",
  "CERTAdvisory": "",
  "CVEIDs": "",
  "CVSS_AccessComplexity": "",
  "CVSS_AccessVector": "",
  "CVSS_Authenication": "",
  "CVSS_AvailabilityImpact": "",
  "CVSS_BaseScore": "",
  "CVSS_BaseVector": "",
  "CVSS_CollateralDamagePotential": "",
  "CVSS_ConfidentialityImpact": "",
  "CVSS_EnvironmentalScore": "",
  "CVSS_EnvironmentalVector": "",
  "CVSS_Exploitability": "",
  "CVSS_IntegrityImpact": "",
  "CVSS_RemediationLevel": "",
  "CVSS_ReportConfidence": "",
  "CVSS_SecurityRequirementsAR": "",
  "CVSS_SecurityRequirementsCR": "",
  "CVSS_SecurityRequirementsIR": "",
  "CVSS_TargetDistribution": "",
  "CVSS_TemporalScore": "",
  "CVSS_TemporalVector": "",
  "DateCreated": "1999-01-05T17:24:47-05:00",
  "DateFirstPublished": "",
  "DateLastUpdated": "2003-07-07T15:22:00+00:00",
  "DatePublic": "",
  "Description": "We found that netscape clients (3.x 4.x, all platforms) allow SSL\nconnections to https://shortname to connect to\nhttps://shortname.andrew.cmu.edu.    Further, with DNS spoofing\nconnections to https://AnyNameWithOutADot can be connected to any SSL\nserver.\n\nThere are two fundamental problems here:\n\n1)If the host name after the https:// has a . (period) in it then\nnetscape will check the full name given in the URL against the common\nname field in the SSL certificate as is proper.\n\nHowever if there is no period in the hostname netscape appears to do a\nname lookup and check the official name (according to DNS) against the\ncertificate.   Faking this DNS response allows any web server with a SSL\ncertificate to masquerade as any other (as long as the URL the user uses\ndoesn't have a period in it).\n\n2) Allowing https://www to go anywhere is inherently insecure.   Even if\nthe DNS checks above where improved, it would still allow the\ncertificate for any server that starts with www. to masquerade as any\nother server that starts with www.\n\nThere may be additional attacks based on injecting java applet that\napears to come from https://www with an IP address of the machine to\nattack via a man in the middle attack with a www.anything certificate.\nOnce loaded the applet could open a URL object to the real https://www\nto be attacked. Since java security is based on hostname and ip address\nbut NOT SSL certificate.  Since java applets can open java URL objects\nto https this would expose the clients client side SSL certficates.",
  "ID": "VU#13186",
  "IDNumber": "13186",
  "IPProtocol": "",
  "Impact": "",
  "Keywords": [
    "http",
    "SSL",
    "shortname",
    "DNS spoofing",
    "browser",
    "netscape"
  ],
  "Overview": "",
  "References": "",
  "Resolution": "",
  "Revision": 2,
  "SystemsAffectedPreamble": "",
  "ThanksAndCredit": "",
  "Title": "netscape.ssl.AnyNameWithOutADot",
  "US-CERTTechnicalAlert": "",
  "VRDA_D1_DirectReport": "",
  "VRDA_D1_Impact": "",
  "VRDA_D1_Population": "",
  "VulnerabilityCount": 1,
  "Workarounds": "SSL web servers should check the host header sent from HTTP version 1.0\nand higher and reject requests that do not match the full name of the\nwebs server. This way users won't get used to trying short names that\nare insecure. Users are encouraged to check the certificate of a server before\nsubmitting sensitive information. The basic form of the attack is simple to reproduce let me know if you\nwant to know how we set it up, or any further information."
}