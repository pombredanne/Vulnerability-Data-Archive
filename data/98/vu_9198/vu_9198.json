{
  "Author": "This document was written by Shawn V Hernan.",
  "CAM_AttackerAccessRequired": "10",
  "CAM_EaseOfExploitation": "10",
  "CAM_Exploitation": "10",
  "CAM_Impact": "3",
  "CAM_InternetInfrastructure": "3",
  "CAM_Population": "15",
  "CAM_ScoreCurrent": 2.3625,
  "CAM_ScoreCurrentWidelyKnown": 2.784375,
  "CAM_ScoreCurrentWidelyKnownExploited": 3.628125,
  "CAM_WidelyKnown": "15",
  "CERTAdvisory": "",
  "CVEIDs": "",
  "CVSS_AccessComplexity": "",
  "CVSS_AccessVector": "",
  "CVSS_Authenication": "",
  "CVSS_AvailabilityImpact": "",
  "CVSS_BaseScore": "",
  "CVSS_BaseVector": "",
  "CVSS_CollateralDamagePotential": "",
  "CVSS_ConfidentialityImpact": "",
  "CVSS_EnvironmentalScore": "",
  "CVSS_EnvironmentalVector": "",
  "CVSS_Exploitability": "",
  "CVSS_IntegrityImpact": "",
  "CVSS_RemediationLevel": "",
  "CVSS_ReportConfidence": "",
  "CVSS_SecurityRequirementsAR": "",
  "CVSS_SecurityRequirementsCR": "",
  "CVSS_SecurityRequirementsIR": "",
  "CVSS_TargetDistribution": "",
  "CVSS_TemporalScore": "",
  "CVSS_TemporalVector": "",
  "DateCreated": "1998-06-23T16:26:10-04:00",
  "DateFirstPublished": "",
  "DateLastUpdated": "1998-05-21T11:54:18-04:00",
  "DatePublic": "",
  "Description": "A vulnerability discovered in the 4.4BSD kernel allows unprivileged\nusers to send certain signals to arbitrary processes on the\nsystem. Depending on the operating system and targeted program,\nthis may allow users to kill off processes or disrupt the operation\nof certain programs.\n\nCertain programs implemented in Unix operating systems make use of\na facility called \"asynchronous I/O\" to handle multiple tasks\nsimultaneously. Asynchronous I/O allows a process to be notified\nwhenever it has data that needs to be read from an input source;\nthe kernel notifies the process using a signal.\n\nAsynchronous I/O is enabled on a descriptor using the fcntl()\nsystem call; a descriptor with the O_ASYNC flag set will cause a\nsignal to be sent whenever there is data available to be read from\nit. Additionally, using the FIOASYNC ioctl(), asynchronous\nnotification can be enabled on a descriptor.\n\nIn cases where multiple processes are used in an application, it\nbecomes useful to allow a descriptor to notify other processes as\nwell. This is accomplished by use of another fcntl() operation,\nF_SETOWN, as well as an ioctl, FIOSETOWN (certain devices also\nprovide an interface to this facility with the TIOCSPGRP\nioctl). These operations allow a program to set the process or\nprocess group that will receive signal notification of pending I/O.\n\nA lack of checking in the code that handles these operations allows\na program to specify an arbitrary process ID when using a socket or\ndevice file descriptor. By setting the recipient of signal\nnotification to a process that is not owned by the program, the\nkernel can be tricked into signalling arbitrary programs.\n\nAdditionally [...]",
  "ID": "VU#9198",
  "IDNumber": "9198",
  "IPProtocol": "",
  "Impact": "unprivileged users to send certain signals to arbitrary\nprocesses on the system; can disrupt operation or\nkill processes",
  "Keywords": [
    "i/o Signal Handling",
    "buffer overflow"
  ],
  "Overview": "",
  "References": "http://www.cdc.net/~x/advisories/open-iosig.asc",
  "Resolution": "",
  "Revision": "1",
  "SystemsAffectedPreamble": "",
  "ThanksAndCredit": "",
  "Title": "OpenBSD/iosig_fcntl",
  "US-CERTTechnicalAlert": "",
  "VRDA_D1_DirectReport": "",
  "VRDA_D1_Impact": "",
  "VRDA_D1_Population": "",
  "VulnerabilityCount": 1,
  "Workarounds": "kernel patch available for OpenBSD"
}