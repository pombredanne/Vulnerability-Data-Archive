{
  "Author": "This document was written by Art Manion.",
  "CAM_AttackerAccessRequired": "20",
  "CAM_EaseOfExploitation": "20",
  "CAM_Exploitation": "0",
  "CAM_Impact": "19",
  "CAM_InternetInfrastructure": "12",
  "CAM_Population": "6",
  "CAM_ScoreCurrent": 25.65,
  "CAM_ScoreCurrentWidelyKnown": 27.36,
  "CAM_ScoreCurrentWidelyKnownExploited": 44.46,
  "CAM_WidelyKnown": "18",
  "CERTAdvisory": "",
  "CVEIDs": "CVE-2001-0553",
  "CVSS_AccessComplexity": "",
  "CVSS_AccessVector": "",
  "CVSS_Authenication": "",
  "CVSS_AvailabilityImpact": "",
  "CVSS_BaseScore": "",
  "CVSS_BaseVector": "",
  "CVSS_CollateralDamagePotential": "",
  "CVSS_ConfidentialityImpact": "",
  "CVSS_EnvironmentalScore": "",
  "CVSS_EnvironmentalVector": "",
  "CVSS_Exploitability": "",
  "CVSS_IntegrityImpact": "",
  "CVSS_RemediationLevel": "",
  "CVSS_ReportConfidence": "",
  "CVSS_SecurityRequirementsAR": "",
  "CVSS_SecurityRequirementsCR": "",
  "CVSS_SecurityRequirementsIR": "",
  "CVSS_TargetDistribution": "",
  "CVSS_TemporalScore": "",
  "CVSS_TemporalVector": "",
  "DateCreated": "2001-07-23T10:12:03-04:00",
  "DateFirstPublished": "2001-07-24T18:57:15-04:00",
  "DateLastUpdated": "2001-08-24T12:06:00-04:00",
  "DatePublic": "2001-07-20T00:00:00",
  "Description": "",
  "ID": "VU#737451",
  "IDNumber": "737451",
  "IPProtocol": "",
  "Impact": "Intruders can gain elevated privileges which they may leverage into root access. According to SSH Communications Security's advisory: Some stock machines which have default locked accounts running SSH Secure Shell 3.0 become vulnerable to arbitrary logins. This is a serious problem with Solaris, for example, which uses the sequence \"NP\" to indicate locked administrative accounts such as \"lp\", \"adm\", \"bin\" etc. Some Linux machines which have accounts with !! in the etc/passwd or /etc/shadow such as xfs or gdm are also vulnerable. Since it is relatively easy to become root after gaining access to certain accounts, we consider this a potential root exploit.",
  "Keywords": [
    "SSH Secure Shell",
    "sshd2",
    "password authentication",
    "sshd",
    "/etc/shadow",
    "/etc/passwd",
    "crypt()",
    "!!",
    "NP"
  ],
  "Overview": "A vulnerability exists in SSH Secure Shell that allows an intruder to log to an account which contains a stored encrypted password of two or fewer characters in length. An intruder may leverage the privileges of such an account to gain full control of the system.",
  "References": [
    "http://www.securityfocus.com/bid/3078",
    "http://www.securitytracker.com/alerts/2001/Jul/1002063.html",
    "http://www.ssh.com/products/ssh/exploit.cfm"
  ],
  "Resolution": "SSH Communications Security recommends that customers upgrade to SSH Secure Shell 3.0.1 or later.",
  "Revision": 43,
  "SystemsAffectedPreamble": "",
  "ThanksAndCredit": "The CERT Coordination thanks SSH Communications Security for information used in this document..",
  "Title": "SSH Secure Shell sshd2 does not adequately authenticate logins to accounts with encrypted password fields containing two or fewer characters",
  "US-CERTTechnicalAlert": "",
  "VRDA_D1_DirectReport": "",
  "VRDA_D1_Impact": "",
  "VRDA_D1_Population": "",
  "VulnerabilityCount": 1,
  "Workarounds": "Alternative solutions provided in SSH Communications Security 's advisory include the following: Disable password authentication to the SSH Secure Shell daemon (sshd2) in the /etc/ssh2/sshd2_config and use another form of authentication such as public key, SecurID, Kerberos, certificates, Smart Cards, or hostbased to authenticate your users. If you cannot disable password authentication fully, limit access to the sshd2 daemon to allow only users with entries in the /etc/passwd and /etc/shadow which exceed two characters. This can be done using the AllowUsers, AllowGroups, DenyUsers, DenyGroups keywords in the /etc/ssh2/sshd2_config file. Assign a valid password for each account. Because it is possible that assigning a password to some system accounts could cause problems on some operating systems, this work-around is limited and is provided only as a last-resort alternative. Use the following patch in the source code: File /lib/sshsession/sshunixuser.c\nFunction ssh_user_validate_local_password\nLocation near line 953, before \n/*Authentication is accepted if \nthe encrypted passwords are identical. Add lines if (strlen(correct_passwd) < 13)\nreturn FALSE;"
}