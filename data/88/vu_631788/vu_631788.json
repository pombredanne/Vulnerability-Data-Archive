{
  "Author": "This document was written by Joel Land.",
  "CAM_AttackerAccessRequired": "0",
  "CAM_EaseOfExploitation": "0",
  "CAM_Exploitation": "0",
  "CAM_Impact": "0",
  "CAM_InternetInfrastructure": "0",
  "CAM_Population": "0",
  "CAM_ScoreCurrent": 0,
  "CAM_ScoreCurrentWidelyKnown": 0,
  "CAM_ScoreCurrentWidelyKnownExploited": 0,
  "CAM_WidelyKnown": "0",
  "CERTAdvisory": "",
  "CVEIDs": "CVE-2015-0949",
  "CVSS_AccessComplexity": "H",
  "CVSS_AccessVector": "L",
  "CVSS_Authenication": "S",
  "CVSS_AvailabilityImpact": "C",
  "CVSS_BaseScore": 6,
  "CVSS_BaseVector": "AV:L/AC:H/Au:S/C:C/I:C/A:C",
  "CVSS_CollateralDamagePotential": "MH",
  "CVSS_ConfidentialityImpact": "C",
  "CVSS_EnvironmentalScore": 5.31633634176,
  "CVSS_EnvironmentalVector": "CDP:MH/TD:M/CR:ND/IR:H/AR:ND",
  "CVSS_Exploitability": "POC",
  "CVSS_IntegrityImpact": "C",
  "CVSS_RemediationLevel": "U",
  "CVSS_ReportConfidence": "UR",
  "CVSS_SecurityRequirementsAR": "ND",
  "CVSS_SecurityRequirementsCR": "ND",
  "CVSS_SecurityRequirementsIR": "H",
  "CVSS_TargetDistribution": "M",
  "CVSS_TemporalScore": 5.1,
  "CVSS_TemporalVector": "E:POC/RL:U/RC:UR",
  "DateCreated": "2014-10-30T08:06:01-04:00",
  "DateFirstPublished": "2015-03-20T14:00:44-04:00",
  "DateLastUpdated": "2015-10-15T11:37:00-04:00",
  "DatePublic": "2015-03-20T00:00:00",
  "Description": "Multiple BIOS implementations permit unsafe System Management Mode (SMM) function calls to memory locations outside of SMRAM. According to Corey Kallenberg of LegbaCore: System Management Mode (SMM) is the most privileged execution mode on the x86 processor. Non-SMM code can neither read nor write SMRAM (SMM RAM). Hence, even a ring 0 level attacker should be unable to gain access to SMM. However, on modern systems, some SMM code calls or interprets function pointers located outside of SMRAM in an unsafe way. This provides opportunity for a ring 0 level attacker to break into SMM. In order to exploit the vulnerability, an attacker must have access to physical memory. The attacker can gain code execution in the context of SMM by first manipulating a function pointer or function called by SMM and then writing bytes to System Management Interrupt (SMI) command port 0xb2 to trigger SMM.",
  "ID": "VU#631788",
  "IDNumber": "631788",
  "IPProtocol": "",
  "Impact": "A local, authenticated attacker may be able to execute arbitrary code in the context of SMM and bypass Secure Boot. In systems that do not use protected range registers, an attacker may be able to reflash firmware.",
  "Keywords": [
    "bios",
    "smm"
  ],
  "Overview": "Multiple BIOS implementations permit unsafe System Management Mode (SMM) function calls to memory locations outside of SMRAM.",
  "References": "http://en.wikipedia.org/wiki/System_Management_Mode",
  "Resolution": "Please see the Vendor Information section below to determine if your system may be affected. We are continuing to communicate with vendors as they investigate these vulnerabilities. Intel has provided the following mitigation guidance for vendors: Starting in Haswell-based client and server platforms, the \"SMM Code Access Check\" feature is available in the CPU. If SMM code enables this in the appropriate MSR, then logical processors are prevented from executing SMM code outside the ranges defined by the SMRR. If SMI code jumps outside these ranges, the CPU will assert a machine check exception. During BIOS development, this can be an effective mechanism for BIOS developers to identify insecure call-outs from SMM, and during runtime, this feature can also be effective at blocking certain attacks that redirect SMM execution outside SMRAM.",
  "Revision": 25,
  "SystemsAffectedPreamble": "",
  "ThanksAndCredit": "Thanks to Corey Kallenberg of LegbaCore for reporting this vulnerability.",
  "Title": "BIOS implementations permit unsafe SMM function calls to memory locations outside of SMRAM",
  "US-CERTTechnicalAlert": "",
  "VRDA_D1_DirectReport": "1",
  "VRDA_D1_Impact": "3",
  "VRDA_D1_Population": "3",
  "VulnerabilityCount": 1,
  "Workarounds": ""
}