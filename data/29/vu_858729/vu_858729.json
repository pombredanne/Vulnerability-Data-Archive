{
  "Author": "This document was written by Will Dormann.",
  "CAM_AttackerAccessRequired": "0",
  "CAM_EaseOfExploitation": "0",
  "CAM_Exploitation": "0",
  "CAM_Impact": "0",
  "CAM_InternetInfrastructure": "0",
  "CAM_Population": "0",
  "CAM_ScoreCurrent": 0,
  "CAM_ScoreCurrentWidelyKnown": 0,
  "CAM_ScoreCurrentWidelyKnownExploited": 0,
  "CAM_WidelyKnown": "0",
  "CERTAdvisory": "",
  "CVEIDs": [
    "CVE-2012-1541",
    "CVE-2012-1543",
    "CVE-2012-3213",
    "CVE-2012-3342",
    "CVE-2012-4301",
    "CVE-2012-4305",
    "CVE-2013-0351",
    "CVE-2013-0409",
    "CVE-2013-0419",
    "CVE-2013-0423",
    "CVE-2013-0424",
    "CVE-2013-0425",
    "CVE-2013-0426",
    "CVE-2013-0427",
    "CVE-2013-0428",
    "CVE-2013-0429",
    "CVE-2013-0430",
    "CVE-2013-0431",
    "CVE-2013-0432",
    "CVE-2013-0433",
    "CVE-2013-0434",
    "CVE-2013-0435",
    "CVE-2013-0436",
    "CVE-2013-0437",
    "CVE-2013-0438",
    "CVE-2013-0439",
    "CVE-2013-0440",
    "CVE-2013-0441",
    "CVE-2013-0442",
    "CVE-2013-0443",
    "CVE-2013-0444",
    "CVE-2013-0445",
    "CVE-2013-0446",
    "CVE-2013-0447",
    "CVE-2013-0448",
    "CVE-2013-0449",
    "CVE-2013-0450",
    "CVE-2013-1472",
    "CVE-2013-1473",
    "CVE-2013-1474",
    "CVE-2013-1475",
    "CVE-2013-1476",
    "CVE-2013-1477",
    "CVE-2013-1478",
    "CVE-2013-1479",
    "CVE-2013-1480",
    "CVE-2013-1481",
    "CVE-2013-1482",
    "CVE-2013-1483",
    "CVE-2013-1489"
  ],
  "CVSS_AccessComplexity": "L",
  "CVSS_AccessVector": "N",
  "CVSS_Authenication": "N",
  "CVSS_AvailabilityImpact": "C",
  "CVSS_BaseScore": 10,
  "CVSS_BaseVector": "AV:N/AC:L/Au:N/C:C/I:C/A:C",
  "CVSS_CollateralDamagePotential": "ND",
  "CVSS_ConfidentialityImpact": "C",
  "CVSS_EnvironmentalScore": 8.7,
  "CVSS_EnvironmentalVector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
  "CVSS_Exploitability": "H",
  "CVSS_IntegrityImpact": "C",
  "CVSS_RemediationLevel": "OF",
  "CVSS_ReportConfidence": "C",
  "CVSS_SecurityRequirementsAR": "ND",
  "CVSS_SecurityRequirementsCR": "ND",
  "CVSS_SecurityRequirementsIR": "ND",
  "CVSS_TargetDistribution": "ND",
  "CVSS_TemporalScore": 8.7,
  "CVSS_TemporalVector": "E:H/RL:OF/RC:C",
  "DateCreated": "2013-01-31T13:37:19-05:00",
  "DateFirstPublished": "2013-02-01T16:01:09-05:00",
  "DateLastUpdated": "2013-09-30T16:34:00-04:00",
  "DatePublic": "2013-02-01T00:00:00",
  "Description": "The Oracle Java Runtime Environment (JRE) allows users to run Java applications in a browser or as standalone programs. Oracle has made the JRE available for multiple operating systems. The Java JRE plug-in provides its own Security Manager. Typically, a web applet runs with a security manager provided by the browser or Java Web Start plugin. Oracle's document states, \"If there is a security manager already installed, this method first calls the security manager's checkPermission method with a RuntimePermission(\"setSecurityManager\") permission to ensure it's safe to replace the existing security manager. This may result in throwing a SecurityException\". By leveraging a number of vulnerabilities, an untrusted Java applet can escalate its privileges to allow full privileges, without requiring code signing. Other vulnerabilities can cause exploitable memory corruption, which could affect Java applets, as well as Java applications, depending on what the Java application does and how it may process untrusted data. Oracle Java 7 Update 11, Java 6 Update 38, and earlier Java versions are affected. At least one of these vulnerabilities is reportedly being exploited in the wild.",
  "ID": "VU#858729",
  "IDNumber": "858729",
  "IPProtocol": "",
  "Impact": "By convincing a user to visit a specially crafted HTML document, a remote attacker may be able to execute arbitrary code on a vulnerable system. Note that applications that use the Internet Explorer web content rendering components, such as Microsoft Office or Windows Desktop Search, may also be used as an attack vector for these vulnerabilities. The vulnerabilities that affect server deployments of Java may be exploited by causing a Java server application to process untrusted data.",
  "Keywords": "",
  "Overview": "Java 7 Update 11, Java 6 Update 38, and earlier versions of Java contain vulnerabilities that can allow a remote, unauthenticated attacker to execute arbitrary code on a vulnerable system.",
  "References": [
    "http://www.oracle.com/technetwork/topics/security/javacpufeb2013-1841061.html",
    "http://www.oracle.com/technetwork/topics/security/javacpufeb2013verbose-1841196.html",
    "http://taosecurity.blogspot.com/2012/11/do-devs-care-about-java-insecurity.html?showComment=1353874245992#c4794680666510382012",
    "http://codeascraft.etsy.com/2013/03/18/java-not-even-once/",
    "http://blogs.technet.com/b/srd/archive/2013/05/29/java-when-you-cannot-let-go.aspx"
  ],
  "Resolution": "Apply an update These issues are addressed in Java 7 Update 13 and Java 6 Update 39. Please see the Oracle Java SE Critical Patch Update Advisory - February 2013 for more details.",
  "Revision": 35,
  "SystemsAffectedPreamble": "",
  "ThanksAndCredit": "These vulnerabilities were reported by Oracle.",
  "Title": "Oracle Java contains multiple vulnerabilities",
  "US-CERTTechnicalAlert": "TA13-032A",
  "VRDA_D1_DirectReport": "0",
  "VRDA_D1_Impact": "4",
  "VRDA_D1_Population": "4",
  "VulnerabilityCount": 1,
  "Workarounds": "Disable Java in web browsers Starting with Java 7 Update 10, it is possible to disable Java content in web browsers through the Java control panel applet. Please see the Java documentation for more details. System administrators wishing to deploy Java 7 Update 10 or later with the \"Enable Java content in the browser\" feature disabled can invoke the Java installer with the WEB_JAVA=0 command-line option. More details are available in the Java documentation. Alternatively, Microsoft has released a Fix it that disables Java in the Internet Explorer web browser. Restrict access to Java applets Network administrators unable to disable Java in web browsers may be able to help mitigate this and other Java vulnerabilities by restricting access to Java applets. This may be accomplished by using proxy server rules, for example. Blocking or whitelisting web requests to .jar and .class files can help to prevent Java from being used by untrusted sources. Filtering requests that contain a Java User-Agent header may also be effective. For example, this technique can be used in environments where Java is required on the local intranet. The proxy can be configured to allow Java requests locally, but block them when the destination is a site on the internet."
}