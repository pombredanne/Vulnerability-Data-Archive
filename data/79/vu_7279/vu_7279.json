{
  "Author": "This document was written by CN=James T Ellis/O=CERT.",
  "CAM_AttackerAccessRequired": "0",
  "CAM_EaseOfExploitation": "0",
  "CAM_Exploitation": "0",
  "CAM_Impact": "0",
  "CAM_InternetInfrastructure": "0",
  "CAM_Population": "0",
  "CAM_ScoreCurrent": 0,
  "CAM_ScoreCurrentWidelyKnown": 0,
  "CAM_ScoreCurrentWidelyKnownExploited": 0,
  "CAM_WidelyKnown": "0",
  "CERTAdvisory": "",
  "CVEIDs": "",
  "CVSS_AccessComplexity": "",
  "CVSS_AccessVector": "",
  "CVSS_Authenication": "",
  "CVSS_AvailabilityImpact": "",
  "CVSS_BaseScore": "",
  "CVSS_BaseVector": "",
  "CVSS_CollateralDamagePotential": "",
  "CVSS_ConfidentialityImpact": "",
  "CVSS_EnvironmentalScore": "",
  "CVSS_EnvironmentalVector": "",
  "CVSS_Exploitability": "",
  "CVSS_IntegrityImpact": "",
  "CVSS_RemediationLevel": "",
  "CVSS_ReportConfidence": "",
  "CVSS_SecurityRequirementsAR": "",
  "CVSS_SecurityRequirementsCR": "",
  "CVSS_SecurityRequirementsIR": "",
  "CVSS_TargetDistribution": "",
  "CVSS_TemporalScore": "",
  "CVSS_TemporalVector": "",
  "DateCreated": "1998-05-21T11:40:25-04:00",
  "DateFirstPublished": "",
  "DateLastUpdated": "1998-05-21T11:39:51+00:00",
  "DatePublic": "",
  "Description": "It appears that A/UX has a relatively common kernel bug, one which was\ndiscovered initially (and patched) in Linux, but also one which appears\nto also be evident in other UNIXes as well, such as Solaris and IRIX.\n\n\nThe bug is an exploitation of the fcntl(F_SETOWN) call and\nsending SIGUR G to processes. It's possible to use the\nfcntl(F_SETOWN) call to select _any_ process, whether you own\nit or not, to receive the SIGURG signal and which point you\ncan initiate a SIGURG signal (simply by socket manipulation\nand 'send(.... MSG_OOB)'). Unless this signal is caught or\nignored by the process, the signal will cause the process to\nbe terminated!\n\nThe problem appears 2-fold:\n\no The fcntl() module isn't checking that the process-ID in\nthe call == the process's own PID, or that the process-group\nin the call (if the parameter is negative) is the same as the\nprocess-group of the process. (\"UNIX System V Network\nProgramming\", Stephan Rago, page 328-329)\n\no That the SIGURG signal isn't ignored by default, which,\nas I understand it, is what the latest UNIXes do and the\n\"expected\" behavior (\"UNIX System V Network Programming\",\nStephan Rago, page 324) My code review shows it's a bug in the\noriginal BSD kernel code (and still in 4.4).  As indicated, a\nlot of people have copied this code (and the bug).\nI don't know when Linux fixed this problem.\n\nA/UX provides a BSD-style signal environment, under which SIGURG _is_\nignored by default. Only processes doing System V signal handling\n(the default) are subject to this problem. Most of the A/UX daemons\nare built to operate in the BSD signal environment; \"weak\" daemons\nthat we've already identified are: init, cron, nfsd, and biod. Init\nis particularly problematic, since once it is dead, process slots\nstart filling up with zombies and soon you can't run any more\nprocesses.\n...\n\nIn general, this attack seems to be relatively moderate in\nlevel of risk.  It is a denial-of-service attack which\nrequires the user to have an account on the system under\nattack. I don't see how this could be used to\ngain root access.\n\nIt's fairly trivial (see below) to create a wrapper that ignores SIGURG\nand then execs the program you want to protect; if it handles SIGURG,\nthis shouldn't have an adverse effect. As a special case, if\nno arguments are provided, my wrapper execs /etc/init. This\navoids having to modify the kernel to start a different\nprogram as the precursor process; this is probably A/UX\nspecific.\n\nThe problem, of course, is determining which processes to protect.\nIf you \"wrap\" init, then all processes which don't invoke\nsignal(SIGURG, SIG_DFL) are protected, since they'll inherit the\nsetting from their parent or other ancestor.",
  "ID": "VU#7279",
  "IDNumber": "7279",
  "IPProtocol": "",
  "Impact": "Can send a SIGURG signal to any process, therefore kill it.",
  "Keywords": [
    "linux",
    "fiosetown",
    "sigurg",
    "signal",
    "kernel"
  ],
  "Overview": "",
  "References": "fix and exploit script posted to bugtraq",
  "Resolution": "",
  "Revision": "1",
  "SystemsAffectedPreamble": "",
  "ThanksAndCredit": "",
  "Title": "fiosetown",
  "US-CERTTechnicalAlert": "",
  "VRDA_D1_DirectReport": "",
  "VRDA_D1_Impact": "",
  "VRDA_D1_Population": "",
  "VulnerabilityCount": 1,
  "Workarounds": "patch available"
}