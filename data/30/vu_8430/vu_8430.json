{
  "Author": "This document was written by CN=Georgia T Killcrece/O=CERT.",
  "CAM_AttackerAccessRequired": "10",
  "CAM_EaseOfExploitation": "15",
  "CAM_Exploitation": "10",
  "CAM_Impact": "6",
  "CAM_InternetInfrastructure": "3",
  "CAM_Population": "20",
  "CAM_ScoreCurrent": 4.725,
  "CAM_ScoreCurrentWidelyKnown": 11.1375,
  "CAM_ScoreCurrentWidelyKnownExploited": 14.5125,
  "CAM_WidelyKnown": "1",
  "CERTAdvisory": "",
  "CVEIDs": "",
  "CVSS_AccessComplexity": "",
  "CVSS_AccessVector": "",
  "CVSS_Authenication": "",
  "CVSS_AvailabilityImpact": "",
  "CVSS_BaseScore": "",
  "CVSS_BaseVector": "",
  "CVSS_CollateralDamagePotential": "",
  "CVSS_ConfidentialityImpact": "",
  "CVSS_EnvironmentalScore": "",
  "CVSS_EnvironmentalVector": "",
  "CVSS_Exploitability": "",
  "CVSS_IntegrityImpact": "",
  "CVSS_RemediationLevel": "",
  "CVSS_ReportConfidence": "",
  "CVSS_SecurityRequirementsAR": "",
  "CVSS_SecurityRequirementsCR": "",
  "CVSS_SecurityRequirementsIR": "",
  "CVSS_TargetDistribution": "",
  "CVSS_TemporalScore": "",
  "CVSS_TemporalVector": "",
  "DateCreated": "1998-05-21T11:55:52-04:00",
  "DateFirstPublished": "",
  "DateLastUpdated": "1999-02-15T10:13:38-05:00",
  "DatePublic": "",
  "Description": "There is a bug in the kernel which allows every user to create a\ndead lock by trying to read \"-1\" bytes from a socket that has some\ndata in its receive buffer. When this happens the O/S simply hangs\nforever. Below is a program that exploits this bug.\n\nThe reason for the bug is because \"struct uio\" has a field \"uio.resid\"\nwhich is an \"int\", while the user's argument is \"u_int\". Later in the\ncode, in soreceive() if the call doesn't block due to no data in the\nsocket, the actual receive loop is skipped (uio.resid IS NOT > 0) -\nline ~737 in uipc_socket.c. But the test for termination condition is\nfalse also - line ~853 in uipc_socket.c. So it executes \"goto restart\"\nand starts the loop over.",
  "ID": "VU#8430",
  "IDNumber": "8430",
  "IPProtocol": "",
  "Impact": "",
  "Keywords": [
    "socket",
    "negative buffer size",
    "deadlock"
  ],
  "Overview": "",
  "References": "",
  "Resolution": "",
  "Revision": "1",
  "SystemsAffectedPreamble": "",
  "ThanksAndCredit": "",
  "Title": "asnfBSD_socket_deadlock",
  "US-CERTTechnicalAlert": "",
  "VRDA_D1_DirectReport": "",
  "VRDA_D1_Impact": "",
  "VRDA_D1_Population": "",
  "VulnerabilityCount": 1,
  "Workarounds": "1. Like FreeBSD, add these tests. On the other hand, this seems to\nbreak the rules: if the user requests more than MAX_INT it will receive\nan error. 2. Fix \"uio\" structure to have \"uio.resid\" and \"u_int\" instead. I'm\nnot sure what are the other implications of this. In addition, the\nuser might, again, not be satisfied as there may be an overflow\ncondition (e.g. the user requests, via \"readv\" more than 2^32 bytes,\nbut actually gets that amount modulu 2^32)."
}