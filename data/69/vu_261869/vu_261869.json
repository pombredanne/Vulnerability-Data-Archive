{
  "Author": "This document was written by David Warren and Ryan Giobbi.",
  "CAM_AttackerAccessRequired": "20",
  "CAM_EaseOfExploitation": "20",
  "CAM_Exploitation": "0",
  "CAM_Impact": "20",
  "CAM_InternetInfrastructure": "10",
  "CAM_Population": "20",
  "CAM_ScoreCurrent": 45,
  "CAM_ScoreCurrentWidelyKnown": 90,
  "CAM_ScoreCurrentWidelyKnownExploited": 150,
  "CAM_WidelyKnown": "5",
  "CERTAdvisory": "",
  "CVEIDs": "CVE-2009-2631",
  "CVSS_AccessComplexity": "M",
  "CVSS_AccessVector": "N",
  "CVSS_Authenication": "N",
  "CVSS_AvailabilityImpact": "P",
  "CVSS_BaseScore": 6.8,
  "CVSS_BaseVector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "CVSS_CollateralDamagePotential": "ND",
  "CVSS_ConfidentialityImpact": "P",
  "CVSS_EnvironmentalScore": 4.6,
  "CVSS_EnvironmentalVector": "CDP:ND/TD:M/CR:ND/IR:ND/AR:ND",
  "CVSS_Exploitability": "POC",
  "CVSS_IntegrityImpact": "P",
  "CVSS_RemediationLevel": "ND",
  "CVSS_ReportConfidence": "C",
  "CVSS_SecurityRequirementsAR": "ND",
  "CVSS_SecurityRequirementsCR": "ND",
  "CVSS_SecurityRequirementsIR": "ND",
  "CVSS_TargetDistribution": "M",
  "CVSS_TemporalScore": 6.1,
  "CVSS_TemporalVector": "E:POC/RL:ND/RC:C",
  "DateCreated": "2009-09-14T10:09:37-04:00",
  "DateFirstPublished": "2009-11-30T13:58:01-05:00",
  "DateLastUpdated": "2013-06-20T13:06:00-04:00",
  "DatePublic": "2009-11-30T00:00:00",
  "Description": "Web browsers enforce the same origin policy to prevent one site's active content (such as JavaScript) from accessing or modifying another site's data. For instance, active content hosted at http://<example.com>/page1.html can access DOM objects on http://<example.com>/page2.html, but cannot access objects hosted at http://<example.net>/page.html. Many clientless SSL VPN products retrieve content from different sites, then present that content as coming from the SSL VPN, effectively circumventing browser same origin restrictions. Clientless SSL VPNs provide browser-based access to internal and external resources without the need to install a traditional VPN client. Typically, these web VPNs are used to access intranet sites (such as an internal webmail server), but many have more capabilities, such as providing access to internal fileshares and remote desktop capabilities. To connect to a VPN, a web browser is used to authenticate to the web VPN, then the web VPN retrieves and presents the content from the requested pages. Web VPN servers interact with clients using a process similar to what is described below: The user presents credentials to the web VPN using a web browser. The authentication can be done through username and password submission, or can involve multi-factor authentication. The web VPN authenticates the user and assigns an ID to the session, which is sent to the user's browser in the form of a cookie. The user can then browse internal resources, such as a webmail server or intranet webserver. URLs as viewed by the user's web browser may be similar to https://<webvpnserver>/www.intranet.example.com. As the web VPN retrieves web pages, it rewrites hyperlinks so that they are accessible through the web VPN. For example, a link to http://<www.intranet.example.com>/mail.html becomes https://<webvpnserver>/www.intranet.example.com/mail.html. Cookies set by the requested webserver may be converted into globally unique cookies before being passed to the user's browser, which prevents collision between two identically named cookies from different requested domains. For example, a sessionid cookie set by intranet.example.com could be renamed to intranet.example.com_sessionid before it is sent from the web VPN to the user's browser . Additionally, the web VPN may replace references to specific HTML DOM objects, such as document.cookie. These DOM objects may be replaced with script that returns the value for that DOM object as if it had been accessed in the context of the requested site's domain. If an attacker constructs a page that obfuscates the document.cookie element in such a way as to avoid being rewritten by the web VPN, then the document.cookie object in the returned page will represent all of the user's cookies for the web VPN domain. Included in this document.cookie are the web VPN session ID cookie itself and any globally unique cookies set by sites requested through the web VPN. The attacker may then use these cookies to hijack the user's VPN session and any other sessions accessed through the web VPN that rely on cookies for session identification. Additionally, an attacker could construct a page with two frames: one hidden and one that displays a legitimate intranet site. The hidden frame could log all keys pressed in the second, benign frame and submit these keypresses as parameters to a XMLHttpRequest GET to the attacker's site, rewritten in web VPN syntax. Note that if the VPN server is allowed to connect to arbitrary Internet sites, these vulnerabilities can be exploited by any site on the Internet.",
  "ID": "VU#261869",
  "IDNumber": "261869",
  "IPProtocol": "tcp",
  "Impact": "By convincing a user to view a specially crafted web page, a remote attacker may be able to obtain VPN session tokens and read or modify content (including cookies, script, or HTML content) from any site accessed through the clientless SSL VPN. This effectively eliminates same origin policy restrictions in all browsers. For example, the attacker may be able to capture keystrokes while a user is interacting with a web page. Because all content runs at the privilege level of the web VPN domain, mechanisms to provide domain-based content restrictions, such as Internet Explorer security zones and the Firefox add-on NoScript, may be bypassed. For additional information about impacts, please see CERT Advisory CA-2000-02.",
  "Keywords": [
    "https",
    "vpn",
    "vpns",
    "same origin",
    "browser",
    "clientless"
  ],
  "Overview": "Clientless SSL VPN products from multiple vendors operate in a way that breaks fundamental browser security mechanisms. An attacker could use these devices to bypass authentication or conduct other web-based attacks.",
  "References": [
    "https://developer.mozilla.org/En/Same_origin_policy_for_JavaScript",
    "https://developer.mozilla.org/en/DOM/document.cookie",
    "http://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy",
    "http://www.owasp.org/index.php/Category:OWASP_Cookies_Database",
    "http://www.owasp.org/index.php/Testing_for_Session_Management_Schema_(OWASP-SM-001)#Black_Box_Testing_and_Examples",
    "http://www.cisco.com/en/US/docs/ios/security/configuration/guide/sec_ssl_vpn.html#wp1404057",
    "http://lists.grok.org.uk/pipermail/full-disclosure/2006-June/046708.html",
    "http://lists.grok.org.uk/pipermail/full-disclosure/2006-June/046886.html",
    "http://www.blackhat.com/presentations/bh-usa-08/Zusman/BH_US_08_Zusman_SSL_VPN_Abuse.pdf"
  ],
  "Resolution": "There is no solution to this problem. Depending on their specific configuration and location in the network these devices may be impossible to operate securely. Administrators are encouraged to view the below workarounds and see the systems affected section of this document for more information about specific vendors.",
  "Revision": 190,
  "SystemsAffectedPreamble": "Any clientless, browser-based SSL VPN that proxies multiple domains as a single domain violates the same origin policy and is considered to be vulnerable. Vendors of such products are listed as \"affected.\" Clientless SSL VPN products ship with a variety of default configurations and available security features. Some products by default provide limited or no access and require an administrator to enable specific domains (or all domains). Depending on functional and security requirements, network architecture, and available security features, it may be possible to operate a clientless SSL VPN in a way that minimizes the potential impact of these vulnerabilities. Users are encouraged to review product documentation and features to determine whether a clientless SSL VPN meets security requirements.",
  "ThanksAndCredit": "This issue was discovered by David Warren and Ryan Giobbi. Much of the original research into this issue was done by Michal Zalewski and Mike Zusman.",
  "Title": "Clientless SSL VPN products break web browser domain-based security models",
  "US-CERTTechnicalAlert": "",
  "VRDA_D1_DirectReport": "0",
  "VRDA_D1_Impact": "3",
  "VRDA_D1_Population": "3",
  "VulnerabilityCount": 1,
  "Workarounds": "Limit URL rewriting to trusted domains If supported by the VPN server, URLs should only be rewritten for trusted internal sites. All other sites and domains should not be accessible through the VPN server. Since an attacker only needs to convince a user to visit web page being viewed through the VPN to exploit this vulnerability, this workaround is likely to be less effective if there are a large number of hosts or domains that can be accessed through the VPN server. When deciding which sites can be visited through use of the VPN server, it is important to remember that all allowed sites will operate within the same security context in the web browser. Limit VPN server network connectivity to trusted domains It may be possible to configure the VPN device to only access specific network domains. This restriction may also be possible by using firewall rules. Disable URL hiding features Obfuscating URLs hides the destination page from the end user. This feature can be used by an attacker to hide the destination page of any links they send. For example, https://<vpn.example.com>/attack-site.com vs https://<vpn.example.com>/778928801."
}