{
  "Author": "This document was written by new-vul.",
  "CAM_AttackerAccessRequired": "0",
  "CAM_EaseOfExploitation": "0",
  "CAM_Exploitation": "0",
  "CAM_Impact": "0",
  "CAM_InternetInfrastructure": "0",
  "CAM_Population": "0",
  "CAM_ScoreCurrent": 0,
  "CAM_ScoreCurrentWidelyKnown": 0,
  "CAM_ScoreCurrentWidelyKnownExploited": 0,
  "CAM_WidelyKnown": "0",
  "CERTAdvisory": "",
  "CVEIDs": "",
  "CVSS_AccessComplexity": "",
  "CVSS_AccessVector": "",
  "CVSS_Authenication": "",
  "CVSS_AvailabilityImpact": "",
  "CVSS_BaseScore": "",
  "CVSS_BaseVector": "",
  "CVSS_CollateralDamagePotential": "",
  "CVSS_ConfidentialityImpact": "",
  "CVSS_EnvironmentalScore": "",
  "CVSS_EnvironmentalVector": "",
  "CVSS_Exploitability": "",
  "CVSS_IntegrityImpact": "",
  "CVSS_RemediationLevel": "",
  "CVSS_ReportConfidence": "",
  "CVSS_SecurityRequirementsAR": "",
  "CVSS_SecurityRequirementsCR": "",
  "CVSS_SecurityRequirementsIR": "",
  "CVSS_TargetDistribution": "",
  "CVSS_TemporalScore": "",
  "CVSS_TemporalVector": "",
  "DateCreated": "1998-05-21T11:35:20-04:00",
  "DateFirstPublished": "",
  "DateLastUpdated": "1998-05-21T11:34:45+00:00",
  "DatePublic": "",
  "Description": "chown of symbolic-linked files changes ownership\nof the link at the wrong end of the link\n\nSun documents this to work the way the reporter expects.\nPosix doesn't address symbolic links, unfortunately,\nand the IBM man page seems to reflect that view - that is to say,\nthe man page does not specify what is the \"correct\" behavior.",
  "ID": "VU#20939",
  "IDNumber": "20939",
  "IPProtocol": "",
  "Impact": "intruder can change permissions on protected files",
  "Keywords": "",
  "Overview": "",
  "References": "",
  "Resolution": "",
  "Revision": "1",
  "SystemsAffectedPreamble": "",
  "ThanksAndCredit": "",
  "Title": "chown",
  "US-CERTTechnicalAlert": "",
  "VRDA_D1_DirectReport": "",
  "VRDA_D1_Impact": "",
  "VRDA_D1_Population": "",
  "VulnerabilityCount": 1,
  "Workarounds": "There are all kinds of workarounds depending on how fancy they want\nto get (e.g. they could parse the tar file and change the stored uids\non the fly). But a simple one might be to have a chown.nosym program\nthat only does the chown if the file is not a symbolic link. Actually, I think there are other difficulties anyway with the\nmethod they are using to transfer these files. What if a user simply had a hard link to someone else's file? Their chown -R would change that ownership as well, incorrectly. The \"chown -R\" is just too indescriminate. They could do a find on each user's home directory doing a chown\nonly on those files owned by the user (and skipping symbolic links): find ~$user \\! -type l -user $user -exec chown $newuser {} \\; (or for efficiency, do a -print instead to get a list of filenames\nto pass to fewer invocations of chown) This idea still fails where one user's directory contains a file\nowned by another user that does not appear in the other user's directory. (This can happen, for example, if you make a hard link to someone else's\nfile who later deletes his/her own link to the file.) If there aren't many instances of this, it might suffice to find them: find ~$user \\! -user $user -print and fix them manually. You really want to run just one find, changing all the uids to the\ncorrect value. You could write a (long) find script to do this,\nbut hard links are still a problem since you don't want to change\na file twice (for example, if uid 5 is changing to 7 and uid 7 is\nchanging to 5). The tar parser begins to look better and better..."
}