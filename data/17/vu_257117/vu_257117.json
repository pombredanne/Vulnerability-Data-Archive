{
  "Author": "This document was written by Chad R Dougherty.",
  "CAM_AttackerAccessRequired": "0",
  "CAM_EaseOfExploitation": "0",
  "CAM_Exploitation": "0",
  "CAM_Impact": "0",
  "CAM_InternetInfrastructure": "0",
  "CAM_Population": "0",
  "CAM_ScoreCurrent": 0,
  "CAM_ScoreCurrentWidelyKnown": 0,
  "CAM_ScoreCurrentWidelyKnownExploited": 0,
  "CAM_WidelyKnown": "0",
  "CERTAdvisory": "",
  "CVEIDs": "CVE-2009-2993",
  "CVSS_AccessComplexity": "",
  "CVSS_AccessVector": "",
  "CVSS_Authenication": "",
  "CVSS_AvailabilityImpact": "",
  "CVSS_BaseScore": "",
  "CVSS_BaseVector": "",
  "CVSS_CollateralDamagePotential": "",
  "CVSS_ConfidentialityImpact": "",
  "CVSS_EnvironmentalScore": "",
  "CVSS_EnvironmentalVector": "",
  "CVSS_Exploitability": "",
  "CVSS_IntegrityImpact": "",
  "CVSS_RemediationLevel": "",
  "CVSS_ReportConfidence": "",
  "CVSS_SecurityRequirementsAR": "",
  "CVSS_SecurityRequirementsCR": "",
  "CVSS_SecurityRequirementsIR": "",
  "CVSS_TargetDistribution": "",
  "CVSS_TemporalScore": "",
  "CVSS_TemporalVector": "",
  "DateCreated": "2009-09-02T12:08:01-04:00",
  "DateFirstPublished": "2009-10-13T15:44:01-04:00",
  "DateLastUpdated": "2009-10-27T14:47:00-04:00",
  "DatePublic": "2009-09-01T00:00:00",
  "Description": "Adobe Reader and the Adobe Acrobat family of software are designed to create, view, and edit Portable Document Format (PDF) files. Adobe Reader is widely deployed, and the Acrobat Reader Plug-In displays PDF inside a web browser. Adobe Reader and Acrobat support JavaScript. According to the JavaScript for Acrobat API reference, certain methods are designed to be unavailable or have security restrictions in a non-privileged context. As a result, it should not be possible to call these methods from non-privileged events, such as page open or mouse-up. Adobe Acrobat and Reader fail to enforce the Privileged Context and Safe Path restrictions on certain JavaScript methods. This failure results in a vulnerability that allows methods that accept a cPath parameter to write to an arbitrary file extension and arbitrary path rather than those intended to be limited by the Safe Path restriction.",
  "ID": "VU#257117",
  "IDNumber": "257117",
  "IPProtocol": "",
  "Impact": "By convincing a user to open a specially crafted PDF file, an attacker may be able to execute certain privileged JavaScript methods that can be used to create arbitrary files and folders on an affected system, subject to the normal permissions of the victim user.",
  "Keywords": [
    "Adobe",
    "JavaScript",
    "safe path",
    "privileged context"
  ],
  "Overview": "A vulnerability in the way Adobe Acrobat and Reader enforce privileges on JavaScript in PDF files could allow arbitrary files to be written to the local file system of an affected system.",
  "References": "http://www.adobe.com/support/security/bulletins/apsb09-15.html",
  "Resolution": "Update\nAdobe has released updates to address this issue. Users are encouraged to read Adobe Security Bulletin APSB09-15 and update vulnerable versions of Adobe Reader and Acrobat.",
  "Revision": 15,
  "SystemsAffectedPreamble": "",
  "ThanksAndCredit": "Thanks to Richard van Eeden of IOActive, for reporting this issue.",
  "Title": "Adobe Acrobat and Reader contain vulnerabilities in multiple Document Object JavaScript methods",
  "US-CERTTechnicalAlert": "",
  "VRDA_D1_DirectReport": "0",
  "VRDA_D1_Impact": "3",
  "VRDA_D1_Population": "4",
  "VulnerabilityCount": 1,
  "Workarounds": "Enable Data Execution Prevention (DEP) in Microsoft Windows Consider enabling Data Execution Prevention (DEP) in supported versions of Windows. DEP should not be treated as a complete workaround, but it can mitigate the execution of attacker-supplied code in some cases. Microsoft has published detailed technical information about DEP in Security Research & Defense blog posts \"Understanding DEP as a mitigation technology\" part 1 and part 2. Use of DEP should be considered in conjunction with the application of patches or other mitigations described in this document. Disable JavaScript in Adobe Reader and Acrobat Disabling JavaScript prevents these vulnerabilities from being exploited and reduces attack surface. If this workaround is applied to updated versions of Adobe Reader and Acrobat, it may protect against future vulnerabilities. To disable JavaScript in Adobe Reader: Open Adobe Acrobat Reader. Open the Edit menu. Choose the Preferences... option. Choose the JavaScript section. Uncheck the Enable Acrobat JavaScript check box. Disabling JavaScript will not resolve the vulnerabilities, it will only disable the vulnerable JavaScript component. When JavaScript is disabled, Adobe Reader and Acrobat prompt to re-enable JavaScript when opening a PDF that contains JavaScript. Prevent Internet Explorer from automatically opening PDF documents The installer for Adobe Reader and Acrobat configures Internet Explorer to automatically open PDF files without any user interaction. This behavior can be reverted to the safer option of prompting the user by importing the following as a .REG file: Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\AcroExch.Document.7] \"EditFlags\"=hex:00,00,00,00 Disable the displaying of PDF documents in the web browser Preventing PDF documents from opening inside a web browser reduces attack surface. If this workaround is applied to updated versions of Adobe Reader and Acrobat, it may protect against future vulnerabilities. To prevent PDF documents from automatically being opened in a web browser with Adobe Reader: Open Adobe Acrobat Reader. Open the Edit menu. Choose the Preferences... option. Choose the Internet section. Uncheck the Display PDF in browser check box."
}