{
  "Author": "This document was written by Will Dormann.",
  "CAM_AttackerAccessRequired": "0",
  "CAM_EaseOfExploitation": "0",
  "CAM_Exploitation": "0",
  "CAM_Impact": "0",
  "CAM_InternetInfrastructure": "0",
  "CAM_Population": "0",
  "CAM_ScoreCurrent": 0,
  "CAM_ScoreCurrentWidelyKnown": 0,
  "CAM_ScoreCurrentWidelyKnownExploited": 0,
  "CAM_WidelyKnown": "0",
  "CERTAdvisory": "",
  "CVEIDs": "",
  "CVSS_AccessComplexity": "M",
  "CVSS_AccessVector": "N",
  "CVSS_Authenication": "S",
  "CVSS_AvailabilityImpact": "P",
  "CVSS_BaseScore": 6,
  "CVSS_BaseVector": "AV:N/AC:M/Au:S/C:P/I:P/A:P",
  "CVSS_CollateralDamagePotential": "ND",
  "CVSS_ConfidentialityImpact": "P",
  "CVSS_EnvironmentalScore": 3.84489471202594,
  "CVSS_EnvironmentalVector": "CDP:ND/TD:M/CR:ND/IR:ND/AR:ND",
  "CVSS_Exploitability": "POC",
  "CVSS_IntegrityImpact": "P",
  "CVSS_RemediationLevel": "W",
  "CVSS_ReportConfidence": "C",
  "CVSS_SecurityRequirementsAR": "ND",
  "CVSS_SecurityRequirementsCR": "ND",
  "CVSS_SecurityRequirementsIR": "ND",
  "CVSS_TargetDistribution": "M",
  "CVSS_TemporalScore": 5.1,
  "CVSS_TemporalVector": "E:POC/RL:W/RC:C",
  "DateCreated": "2016-02-09T12:24:20-05:00",
  "DateFirstPublished": "2016-03-25T23:37:50-04:00",
  "DateLastUpdated": "2017-12-04T09:17:00-05:00",
  "DatePublic": "2016-03-25T00:00:00",
  "Description": "npm is the default package manager for Node.js, which is a runtime environment for developing server-side web applications. There are several factors in the npm system that could allow for a worm to compromise the majority of the npm ecosystem: npm encourages the use of semver, or semantic versioning. With semver, dependencies are not locked to a certain version by default. For any dependency of a package, the dependency author can push a new version of the package. npm utilizes persistent authentication to the npm server. Once a user is logged in to npm, they are not logged out until they manually do so. Any user who is currently logged in and types npm install may allow any module to execute arbitrary publish commands. npm utilizes a centralized registry, which is utilized by the majority of the Node.js ecosystem. Typing npm publish ships your code to this registry server, where it can be installed by anyone. When these three aspects of npm are combined, it provides the capability for a self-replicating worm. The following steps are an example worm workflow outlined in the report provided by Sam Saccone: Socially engineer a npm module owner to npm install an infected module on their system. Worm creates a new npm module\nWorm sets a lifecycle hook on the new npm module to execute the worm on any install\nWorm publishes the new module to the user's npm account\nWorm walks all of the user\u2019s owned npm modules (with publish permissions) and adds the new module as a dependency in each's package.json. Worm publishes new versions to each of the owned modules with a \u201cbugfix\u201d level semver bump. This ensures the majority of dependent modules using the  ^ or  ~ signifier will include the self\u00adreplicating module during the next install. The full report from Sam Saccone is available here in PDF form: The timeline provided in the above document is as follows: Jan 1 2016 \u00ad\u00ad Initial discovery of exploit\nJan 4 2016 \u00ad\u00ad Initial disclosure + proof of concept to npm\nJan 5 2016 \u00ad \u00ad Private disclosure to Facebook\nJan 7 2016 \u00ad\u00ad Response from npm\nJan 8 2016 \u00ad\u00ad Confirmation of works as intended no intention to fix at the moment from npm. Feb 5 2016 \u00ad\u00ad Shared the disclosure doc",
  "ID": "VU#319816",
  "IDNumber": "319816",
  "IPProtocol": "",
  "Impact": "An attacker may be able to create a self-replicating worm that spreads as users install packages.",
  "Keywords": [
    "npm",
    "lifecycle scripts",
    "shrinkwrap",
    "Node.js"
  ],
  "Overview": "npm allows packages to take actions that could result in a malicious npm package author to create a worm that spreads across the majority of the npm ecosystem.",
  "References": [
    "http://blog.npmjs.org/post/141702881055/package-install-scripts-vulnerability",
    "https://www.npmjs.com/",
    "https://nodejs.org/en/",
    "https://docs.npmjs.com/getting-started/semantic-versioning",
    "https://docs.npmjs.com/cli/shrinkwrap",
    "https://github.com/joaojeronimo/rimrafall",
    "https://blog.liftsecurity.io/2015/01/27/amaliciousmoduleonnpm",
    "https://medium.com/@nm_johnson/npm-package-hijacking-from-the-hijackers-perspective-af0c48ab9922",
    "https://github.com/contolini/pizza-party"
  ],
  "Resolution": "The CERT/CC is currently unaware of a practical solution to this problem. Please see the npm Blog for details and also consider the following workarounds:",
  "Revision": 46,
  "SystemsAffectedPreamble": "",
  "ThanksAndCredit": "Thanks to David Ross and Sam Saccone for reporting this vulnerability.",
  "Title": "npm fails to restrict the actions of malicious npm packages",
  "US-CERTTechnicalAlert": "",
  "VRDA_D1_DirectReport": "1",
  "VRDA_D1_Impact": "4",
  "VRDA_D1_Population": "2",
  "VulnerabilityCount": 1,
  "Workarounds": "As a user who owns modules you should not stay logged into npm. (Easily enough, npm logout and  npmlogin) Use  npm shrinkwrap to lock down your dependencies\nUse  npminstall someModule --ignore-scripts"
}