{
  "Author": "This document was written by new-vul.",
  "CAM_AttackerAccessRequired": "0",
  "CAM_EaseOfExploitation": "0",
  "CAM_Exploitation": "0",
  "CAM_Impact": "0",
  "CAM_InternetInfrastructure": "0",
  "CAM_Population": "0",
  "CAM_ScoreCurrent": 0,
  "CAM_ScoreCurrentWidelyKnown": 0,
  "CAM_ScoreCurrentWidelyKnownExploited": 0,
  "CAM_WidelyKnown": "0",
  "CERTAdvisory": "",
  "CVEIDs": "",
  "CVSS_AccessComplexity": "",
  "CVSS_AccessVector": "",
  "CVSS_Authenication": "",
  "CVSS_AvailabilityImpact": "",
  "CVSS_BaseScore": "",
  "CVSS_BaseVector": "",
  "CVSS_CollateralDamagePotential": "",
  "CVSS_ConfidentialityImpact": "",
  "CVSS_EnvironmentalScore": "",
  "CVSS_EnvironmentalVector": "",
  "CVSS_Exploitability": "",
  "CVSS_IntegrityImpact": "",
  "CVSS_RemediationLevel": "",
  "CVSS_ReportConfidence": "",
  "CVSS_SecurityRequirementsAR": "",
  "CVSS_SecurityRequirementsCR": "",
  "CVSS_SecurityRequirementsIR": "",
  "CVSS_TargetDistribution": "",
  "CVSS_TemporalScore": "",
  "CVSS_TemporalVector": "",
  "DateCreated": "1998-05-21T11:48:21-04:00",
  "DateFirstPublished": "",
  "DateLastUpdated": "1998-05-21T11:47:46+00:00",
  "DatePublic": "",
  "Description": "HP\n==\nI have found some serious security implications related\nto the rpc.yppasswdd program and the underlying protocol\non HPUX (test done with 10.01).\n\nAs far as I know, it is not documented that the protocol\nallows any regular user, from inside or outside, to change\nthe following fields:\n\ngecos (full name),\nshell,\n\nbeside his own password.\n\nTHREAT 1: changing the user shell.\n\nThis means that at sites where restricted/captive shell\nare used in conjunction with rpc.yppasswdd, any user can\nchange/remove those shells, either from the inside or\neven from another machine (not even an HP one) as long\nas they have access to it and know their own password.\nA C program of less than, say, 50 lines is sufficient.\n\nTHREAT 2: probing for account.\n\nThe protocol could also be used to probe for account/password\nas it is only necessary to know where the daemon is\nrunning rather than guessing the nis domain name\nand there is no need to bind to the nis server.\nAny regular user can do it.\nThe logging, when activated, is almost useless:\n\n96.12.12 21:02:09  rubis     pid=3991   /usr/lib/netsvc/yp/rpc.yppasswdd\nmv succeded!\n96.12.12 21:02:14  rubis     pid=3991   /usr/lib/netsvc/yp/rpc.yppasswdd\ngoutier:  bad passwd\n96.12.13 08:07:49  rubis     pid=3991   /usr/lib/netsvc/yp/rpc.yppasswdd\n\nBy the way, Y2K problem is lurking here.\n\nAs rpc.yppasswdd is run as a daemon, this means that\ntcp-wrapper is useless. The same is true for filtering\nvia portmap, since port probing could be done.\n\nTHREAT 3: allowing weak password.\n\nAs any user could change his own password directly,\nthis means that program which enforce stronger password\n(like npasswd, etc) could easily be bypassed. By the way,\nthe regular yppasswd program is lax in allowing very weak\npassword.\n\n+  A password can be as few as four characters long if it\ncontains\n+  at least one special character or\n+  a mixture of numeric, uppercase and lowercase letters.\n+  A password can be as few as five characters long if it\ncontains a mixture of\n+  uppercase and lowercase letters or\n+  numeric and either uppercase or lowercase letters.\n+  A password must contain at least six characters if it contains\nonly monocase letters.\nAll these rules except the first are relaxed if you try three times to\nenter an unacceptable new password.  You cannot, however, enter a null\npassword.\n\nA null encrypted password could also be set directly.\nThis is not easily spotted by inspection as the null password\nis encrypted in the \"password files\".\n\nTHREAT 4: changing gecos information.\n\nChanging the gecos field could be used in interesting ways\nto challenge other programs, like finger, sendmail, etc.\n\nSGI\n===\nI have found some serious security implications related\nto the rpc.passwd program and the underlying protocol\non SGI (test done on 5.3 for password, gecos and shell).\n\nOn SGI, one must uses a different version of the\nprotocol (YPPASSWDVERS_NEWSGI) instead of the standard\none (YPPASSWDPROC_UPDATE), but the problem exists.\n\nDEFENSE:\n\nOn SUN, at least, /usr/etc/rpc.yppasswd has parameters which\ncontrols which fields could be modified:\n\n-nogecos\n-noshell\n-nopw",
  "ID": "VU#3954",
  "IDNumber": "3954",
  "IPProtocol": "",
  "Impact": "THREAT 3: allowing weak password. The problem with the protocol, is that it allow any regular user\nto bypass any restrictions a site could put on the format of\nallowed password via the replacement of yppasswd by programs like\nnpasswd, passwd+, etc. I see no solution here, without a change\nin the protocol.",
  "Keywords": [
    "rpc.yppasswdd",
    "gecos",
    "shell",
    "passwd",
    "nogecos",
    "noshell",
    "nopw",
    "chmp"
  ],
  "Overview": "",
  "References": "",
  "Resolution": "",
  "Revision": "1",
  "SystemsAffectedPreamble": "",
  "ThanksAndCredit": "",
  "Title": "rpc.yppasswdd",
  "US-CERTTechnicalAlert": "",
  "VRDA_D1_DirectReport": "",
  "VRDA_D1_Impact": "",
  "VRDA_D1_Population": "",
  "VulnerabilityCount": 1,
  "Workarounds": "SUN: at least, /usr/etc/rpc.yppasswdd has parameters which\ncontrols which fields could be modified: -nogecos\n-noshell\n-nopw This puts some control in the hand of the system administrator. This, however, do not address THREAT 2 and 3. We are, at this very moment, interested in a quick solution to THREAT 1. SGI: For SGI, there should be also -nohome, or a complete disabling\nof YPPASSWDVERS_NEWSGI. Personnaly, I prefer the finer control. This puts some control in the hand of the system administrator. This, however, do not address THREAT 2 and 3."
}